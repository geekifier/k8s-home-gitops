---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: authelia
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    defaultPodOptions:
      # https://www.authelia.com/integration/kubernetes/introduction/#enable-service-links
      enableServiceLinks: false
    controllers:
      authelia:
        replicas: 2
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            seccompProfile: { type: RuntimeDefault }
        containers:
          app:
            image:
              repository: ghcr.io/authelia/authelia
              tag: 4.39.6@sha256:08776367d54d4482c54ac8ca75b18f7db3287b751106e19736780c5f6811374d
            env:
              AUTHELIA_SERVER_DISABLE_HEALTHCHECK: "true"
              X_AUTHELIA_CONFIG_FILTERS: template
              AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: /config/secrets/AUTHELIA_JWT_SECRET
              AUTHELIA_SESSION_SECRET_FILE: /config/secrets/AUTHELIA_SESSION_SECRET
              AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: /config/secrets/AUTHELIA_STORAGE_ENCRYPTION_KEY
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE: /config/secrets/AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD
              AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER:
                secretKeyRef:
                  name: authelia-file-secret
                  key: AUTHELIA_AUTHENTICATION_BACKEND_LDAP_USER
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/health
                    port: &port 9091
                  initialDelaySeconds: 2
                  periodSeconds: 10
                  timeoutSeconds: 3
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 20m
                memory: 128Mi
              limits:
                memory: 256Mi
    service:
      app:
        controller: authelia
        ports:
          http:
            port: *port
          metrics:
            port: 9959
    ingress:
      app:
        className: internal
        # annotations:
        #   nginx.ingress.kubernetes.io/configuration-snippet: |
        #     add_header Cache-Control "no-store";
        #     add_header Pragma "no-cache";
        #     add_header X-Frame-Options "SAMEORIGIN";
        #     add_header X-XSS-Protection "1; mode=block";
        hosts:
          - host: auth-k8s.${SECRET_DOMAIN_INT}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    serviceMonitor:
      app:
        serviceName: authelia
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
    persistence:
      config:
        type: configMap
        name: authelia-cm
        globalMounts:
          - path: /config/configuration.yml
            subPath: authelia-config.yaml
            readOnly: true
      secrets:
        type: secret
        name: authelia-file-secret
        globalMounts:
          - path: /config/secrets
            readOnly: true
      dbsecret:
        type: secret
        name: pgsql-authelia
        globalMounts:
          - path: /config/pgsqlsecret
            readOnly: true
